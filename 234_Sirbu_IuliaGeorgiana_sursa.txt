~~~ Cerinta 4
-- Crearea bazei de date 

DROP TABLE utilizatori CASCADE CONSTRAINTS;
DROP TABLE elevi CASCADE CONSTRAINTS;
DROP TABLE studenti CASCADE CONSTRAINTS;
DROP TABLE profesori CASCADE CONSTRAINTS;
DROP TABLE resurse CASCADE CONSTRAINTS;
DROP TABLE utilizatori_acceseaza_resurse CASCADE CONSTRAINTS;
DROP TABLE grupuri CASCADE CONSTRAINTS;
DROP TABLE utilizatori_creeaza_grupuri CASCADE CONSTRAINTS;
DROP TABLE certificate CASCADE CONSTRAINTS;
DROP TABLE utilizatori_deblocheaza_certif CASCADE CONSTRAINTS;
DROP SEQUENCE seq_debloc_certif;
DROP TABLE probleme CASCADE CONSTRAINTS;
DROP TABLE utilizatori_rezolva_probleme CASCADE CONSTRAINTS;
DROP TABLE clase CASCADE CONSTRAINTS;
DROP TABLE utilizatori_apartin_in_clase CASCADE CONSTRAINTS;
DROP TABLE teste CASCADE CONSTRAINTS;
DROP TABLE utilizatori_lucreaza_teste CASCADE CONSTRAINTS;
DROP TABLE forum CASCADE CONSTRAINTS;
DROP TABLE postari CASCADE CONSTRAINTS;

DROP SEQUENCE seq_profesori;
CREATE SEQUENCE seq_profesori START WITH 100 INCREMENT BY 1;

DROP SEQUENCE seq_elevi;
CREATE SEQUENCE seq_elevi START WITH 100 INCREMENT BY 1;

DROP SEQUENCE seq_studenti;
CREATE SEQUENCE seq_studenti START WITH 100 INCREMENT BY 1;

DROP SEQUENCE seq_utilizatori;
CREATE SEQUENCE seq_utilizatori START WITH 100 INCREMENT BY 1;


CREATE TABLE utilizatori (
    id_utilizator INT PRIMARY KEY,
    nume VARCHAR2(50) NOT NULL,
    prenume VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    parola VARCHAR2(100) NOT NULL,
    tip_utilizator VARCHAR2(10) NOT NULL,
    CHECK (tip_utilizator IN ('Elev', 'Student', 'Profesor'))
);

CREATE TABLE elevi (
    id_elev INT PRIMARY KEY,
    id_utilizator INT UNIQUE NOT NULL,
    profil VARCHAR2(10) NOT NULL CHECK (profil IN ('Real', 'Uman')),
    clasa VARCHAR2(10) NOT NULL CHECK (clasa IN ('9', '10', '11', '12')),
    FOREIGN KEY (id_utilizator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE
);

CREATE TABLE studenti (
    id_student INT PRIMARY KEY,
    id_utilizator INT UNIQUE NOT NULL,
    specializare VARCHAR2(100) NOT NULL,
    an_studiu VARCHAR2(10) NOT NULL CHECK (an_studiu IN ('I', 'II', 'III', 'IV')),
    FOREIGN KEY (id_utilizator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE
);

CREATE TABLE profesori (
    id_profesor INT PRIMARY KEY,
    id_utilizator INT UNIQUE NOT NULL,
    specializare VARCHAR2(100) NOT NULL,
    FOREIGN KEY (id_utilizator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE
);

CREATE TABLE resurse (
    id_resursa INT PRIMARY KEY,
    titlu VARCHAR2(100) NOT NULL,
    descriere VARCHAR2(100),
    tip_resursa VARCHAR2(10) CHECK (tip_resursa IN ('Video', 'Document', 'Articol'))
);

CREATE TABLE utilizatori_acceseaza_resurse (
    id_utilizator INT,
    id_resursa INT,
    PRIMARY KEY (id_utilizator, id_resursa),
    FOREIGN KEY (id_utilizator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE,
    FOREIGN KEY (id_resursa) REFERENCES resurse(id_resursa) ON DELETE CASCADE
);

CREATE TABLE grupuri (
    id_grup INT PRIMARY KEY,
    id_creator INT NOT NULL,
    nume_grup VARCHAR2(100) NOT NULL,
    descriere VARCHAR2(100),
    FOREIGN KEY (id_creator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE
);

CREATE TABLE utilizatori_creeaza_grupuri (
    id_utilizator INT,
    id_grup INT,
    PRIMARY KEY (id_utilizator, id_grup),
    FOREIGN KEY (id_utilizator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE,
    FOREIGN KEY (id_grup) REFERENCES grupuri(id_grup) ON DELETE CASCADE
);

CREATE TABLE certificate (
    id_certificat INT PRIMARY KEY,
    nume_certificat VARCHAR2(100) NOT NULL,
    descriere VARCHAR2(100),
    prag_deblocare INT,
    disciplina VARCHAR2(100)
);

CREATE TABLE utilizatori_deblocheaza_certif (
    id_deblocare INT PRIMARY KEY,
    id_utilizator INT,
    id_certificat INT,
    data_obtinerii DATE,
    FOREIGN KEY (id_utilizator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE,
    FOREIGN KEY (id_certificat) REFERENCES certificate(id_certificat) ON DELETE CASCADE
);

CREATE SEQUENCE seq_debloc_certif
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE TABLE probleme (
    id_problema INT PRIMARY KEY,
    id_profesor INT NOT NULL,
    descriere VARCHAR2(100) NOT NULL,
    dificultate VARCHAR2(10) NOT NULL CONSTRAINT dificultate_check CHECK (dificultate IN ('Usor', 'Mediu', 'Dificil')),
    disciplina VARCHAR2(100) NOT NULL,
    FOREIGN KEY (id_profesor) REFERENCES profesori(id_profesor)
);


CREATE TABLE utilizatori_rezolva_probleme (
    id_rezolvare INT PRIMARY KEY,
    id_utilizator INT,
    id_problema INT,
    scor_obtinut INT,
    FOREIGN KEY (id_utilizator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE,
    FOREIGN KEY (id_problema) REFERENCES probleme(id_problema) ON DELETE CASCADE
);

CREATE TABLE clase (
    id_clasa INT PRIMARY KEY,
    id_profesor INT NOT NULL,
    nume_clasa VARCHAR2(100) NOT NULL,
    descriere VARCHAR2(100),
    FOREIGN KEY (id_profesor) REFERENCES profesori(id_profesor) ON DELETE SET NULL
);

CREATE TABLE utilizatori_apartin_in_clase (
    id_clasa INT,
    id_utilizator INT,
    PRIMARY KEY (id_clasa, id_utilizator),
    FOREIGN KEY (id_clasa) REFERENCES clase(id_clasa) ON DELETE CASCADE,
    FOREIGN KEY (id_utilizator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE
);

CREATE TABLE teste (
    id_test INT PRIMARY KEY,
    id_clasa INT NOT NULL,
    titlu VARCHAR2(100) NOT NULL,
    descriere VARCHAR2(100),
    FOREIGN KEY (id_clasa) REFERENCES clase(id_clasa) ON DELETE CASCADE
);

CREATE TABLE utilizatori_lucreaza_teste (
    id_rezultat INT PRIMARY KEY,
    id_utilizator INT,
    id_test INT,
    nota INT,
    FOREIGN KEY (id_utilizator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE,
    FOREIGN KEY (id_test) REFERENCES teste(id_test) ON DELETE CASCADE
);

CREATE TABLE forum (
    id_forum INT PRIMARY KEY,
    id_clasa INT NOT NULL,
    id_utilizator INT,
    subiect VARCHAR2(100) NOT NULL,
    FOREIGN KEY (id_clasa) REFERENCES clase(id_clasa) ON DELETE CASCADE,
    FOREIGN KEY (id_utilizator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE
);

CREATE TABLE postari (
    id_postare INT PRIMARY KEY,
    id_forum INT NOT NULL,
    id_utilizator INT,
    continut VARCHAR2(150) NOT NULL,
    FOREIGN KEY (id_forum) REFERENCES forum(id_forum) ON DELETE CASCADE,
    FOREIGN KEY (id_utilizator) REFERENCES utilizatori(id_utilizator) ON DELETE CASCADE
);


~~~ Cerinta 5
-- TABELA UTILIZATORI
INSERT INTO utilizatori VALUES(0, 'Popescu', 'Andrei', 'andrei.popescu@learnitude.com', '0ac1e749b51a70f6c17b', 'Elev');
INSERT INTO utilizatori VALUES(1, 'Popa', 'Bogdan', 'bogdan.popa@learnitude.com', '7a3a41ed47d4d01c373a', 'Student');
INSERT INTO utilizatori VALUES(2, 'Andrei', 'Alex', 'alex.andrei@learnitude.com', '1a03caa6f0692a5c6fa8', 'Profesor');
INSERT INTO utilizatori VALUES(3, 'Radu', 'Adrian', 'adrian.radu@learnitude.com', 'ebe23dd3306af45b6f23', 'Elev');
INSERT INTO utilizatori VALUES(4, 'Alexandru', 'Mihai', 'mihai.alexandru@learnitude.com', '88df8bf17aaed1cbc483', 'Student');
INSERT INTO utilizatori VALUES(5, 'Mihai', 'Alexandru', 'alexandru.mihai@learnitude.com', '2bafba6ffb799e3740d8', 'Profesor');
INSERT INTO utilizatori VALUES(6, 'Ionescu', 'Cristian', 'cristian.ionescu@learnitude.com', '090804718249acbab0eb', 'Elev');
INSERT INTO utilizatori VALUES(7, 'Pop', 'Marius', 'marius.pop@learnitude.com', '0ab043e96f4c8751b089', 'Student');
INSERT INTO utilizatori VALUES(8, 'Bogdan', 'Daniel', 'daniel.bogdan@learnitude.com', 'd1ca052662d90c765a32', 'Profesor');
INSERT INTO utilizatori VALUES(9, 'Stefan', 'Vlad', 'vlad.stefan@learnitude.com', '782edfb4e082743e3b2e', 'Elev');
INSERT INTO utilizatori VALUES(10, 'Dumitru', 'Andreea', 'andreea.dumitru@learnitude.com', '2c94becad7a4cb393893', 'Student');
INSERT INTO utilizatori VALUES(11, 'Constantin', 'Alexandra', 'alexandra.constantin@learnitude.com', 'ef26a88363b41baba3ec', 'Profesor');
INSERT INTO utilizatori VALUES(12, 'Nicolae', 'Cristina', 'cristina.nicolae@learnitude.com', '78d4fee3d6618f595e8b', 'Elev');
INSERT INTO utilizatori VALUES(13, 'Ivan', 'Ioana', 'ioana.ivan@learnitude.com', 'db152814d462d8b72a61', 'Student');
INSERT INTO utilizatori VALUES(14, 'Marin', 'Alina', 'alina.marin@learnitude.com', '3762b359f81c2875cae5', 'Profesor');
INSERT INTO utilizatori VALUES(15, 'Tudor', 'Mihaela', 'mihaela.tudor@learnitude.com', 'e94370a1641dd97005eb', 'Elev');
INSERT INTO utilizatori VALUES(16, 'Dobre', 'Diana', 'diana.dobre@learnitude.com', '6f08605bbbfaf0c138e3', 'Student');
INSERT INTO utilizatori VALUES(17, 'Barbu', 'Oana', 'oana.barbu@learnitude.com', 'aa17e97f424e63ce9828', 'Profesor');
INSERT INTO utilizatori VALUES(18, 'Georgescu', 'Raluca', 'raluca.georgescu@learnitude.com', '62bca9ca5a51d4fac6c2', 'Elev');
INSERT INTO utilizatori VALUES(19, 'Stan', 'Elena', 'elena.stan@learnitude.com', 'd11e66ef67d0fcf7e7b4', 'Student');
INSERT INTO utilizatori VALUES(20, 'Pavel', 'Gabriel', 'gabriel.pavel@learnitude.com', '17777152784d39535ac9', 'Profesor');
INSERT INTO utilizatori VALUES(21, 'Voinea', 'Ionut', 'ionut.voinea@learnitude.com', '1e4effd0eae77c5d9225', 'Elev');
INSERT INTO utilizatori VALUES(22, 'Lupu', 'Stefan', 'stefan.lupu@learnitude.com', '7e1a38cf6ba84987100a', 'Student');
INSERT INTO utilizatori VALUES(23, 'Dragan', 'Nicu', 'nicu.dragan@learnitude.com', 'e4880cb22b81722a2549', 'Profesor');
INSERT INTO utilizatori VALUES(24, 'Dinu', 'Dragos', 'dragos.dinu@learnitude.com', 'e6b1eb3aa6924faea4ed', 'Elev');
INSERT INTO utilizatori VALUES(25, 'Dinescu', 'Florin', 'florin.dinescu@learnitude.com', '2f78478edadc3a54bc7c', 'Student');
INSERT INTO utilizatori VALUES(26, 'Manea', 'George', 'george.manea@learnitude.com', '46eddcfba54fe14ce50d', 'Profesor');
INSERT INTO utilizatori VALUES(27, 'Vasilescu', 'Iulian', 'iulian.vasilescu@learnitude.com', '3e8ca8d008a964af91d6', 'Elev');
INSERT INTO utilizatori VALUES(28, 'Munteanu', 'Laurentiu', 'laurentiu.munteanu@learnitude.com', '584c5d23e20fd1112267', 'Student');
INSERT INTO utilizatori VALUES(29, 'Serban', 'Marian', 'marian.serban@learnitude.com', '4f129adb41535007d52e', 'Profesor');
INSERT INTO utilizatori VALUES(30, 'Albu', 'Anca', 'anca.albu@learnitude.com', '3ce1e52c4b0f1f89ea0d', 'Elev');
INSERT INTO utilizatori VALUES(31, 'Tabacu', 'Bianca', 'bianca.tabacu@learnitude.com', '13baf2d851c82613fc31', 'Student');
INSERT INTO utilizatori VALUES(32, 'Ciobanu', 'Camelia', 'camelia.ciobanu@learnitude.com', 'e033c07382d9c10cffcd', 'Profesor');
INSERT INTO utilizatori VALUES(33, 'Marinescu', 'Dana', 'dana.marinescu@learnitude.com', '488b21d5c2f74ed14eaf', 'Elev');
INSERT INTO utilizatori VALUES(34, 'Ionescu', 'Eugenia', 'eugenia.ionescu@learnitude.com', '5de372f6fd61633b52fb', 'Student');
INSERT INTO utilizatori VALUES(35, 'Petrescu', 'Felicia', 'felicia.petrescu@learnitude.com', '037d847399f37878fe53', 'Profesor');
INSERT INTO utilizatori VALUES(36, 'Stoica', 'Georgeta', 'georgeta.stoica@learnitude.com', '8129ce9954cbe6c3de2a', 'Elev');
INSERT INTO utilizatori VALUES(37, 'Tomescu', 'Horia', 'horia.tomescu@learnitude.com', '5b0eefcb28d74680c50c', 'Student');
INSERT INTO utilizatori VALUES(38, 'Gheorghiu', 'Irina', 'irina.gheorghiu@learnitude.com', 'a14254ae620c7de46626', 'Profesor');
INSERT INTO utilizatori VALUES(39, 'Cristea', 'Larisa', 'larisa.cristea@learnitude.com', '4e729556270c62df424e', 'Elev');
INSERT INTO utilizatori VALUES(40, 'Neagu', 'Matei', 'matei.neagu@learnitude.com', '9eb71e441f324855e808', 'Student');
INSERT INTO utilizatori VALUES(41, 'Nicoara', 'Nicolae', 'nicolae.nicoara@learnitude.com', '155f8486478d4655e691', 'Profesor');
INSERT INTO utilizatori VALUES(42, 'Iancu', 'Octavian', 'octavian.iancu@learnitude.com', '33b16dd19eb69bfe5897', 'Elev');
INSERT INTO utilizatori VALUES(43, 'Chiriac', 'Paul', 'paul.chiriac@learnitude.com', '67e16efafb52a0cb9207', 'Student');
INSERT INTO utilizatori VALUES(44, 'Toma', 'Radu', 'radu.toma@learnitude.com', '32cedb81826760ffce12', 'Profesor');
INSERT INTO utilizatori VALUES(45, 'Stanciu', 'Sergiu', 'sergiu.stanciu@learnitude.com', '183b503e121c080bfdf3', 'Elev');
INSERT INTO utilizatori VALUES(46, 'Badea', 'Tudor', 'tudor.badea@learnitude.com', '884e5311bcc77159bcf6', 'Student');
INSERT INTO utilizatori VALUES(47, 'Nistor', 'Valentin', 'valentin.nistor@learnitude.com', '351bb6fca3642738ec10', 'Profesor');
INSERT INTO utilizatori VALUES(48, 'Florea', 'Victor', 'victor.florea@learnitude.com', 'aca048140883a1f7548a', 'Elev');
INSERT INTO utilizatori VALUES(49, 'Frincu', 'Zoltan', 'zoltan.frincu@learnitude.com', '52a8a816dd861a7070fd', 'Student');
INSERT INTO utilizatori VALUES(50, 'Gavrila', 'Aura', 'aura.gavrila@learnitude.com', '039ec4570223895a83e8', 'Profesor');
INSERT INTO utilizatori VALUES(51, 'Marcu', 'Claudia', 'claudia.marcu@learnitude.com', '2268f94567a7666389b6', 'Elev');
INSERT INTO utilizatori VALUES(52, 'Ciucu', 'Dorina', 'dorina.ciucu@learnitude.com', 'a66ce1727400ecff8a5f', 'Student');
INSERT INTO utilizatori VALUES(53, 'Vlad', 'Elisabeta', 'elisabeta.vlad@learnitude.com', 'd5ab855d773ec3a85448', 'Profesor');
INSERT INTO utilizatori VALUES(54, 'Gheorghe', 'Florentina', 'florentina.gheorghe@learnitude.com', 'c54da2909de27ef49ba2', 'Elev');
INSERT INTO utilizatori VALUES(55, 'Luca', 'Gabriela', 'gabriela.luca@learnitude.com', '7c450c6c59c6ee0db535', 'Student');
INSERT INTO utilizatori VALUES(56, 'Moldovan', 'Henrietta', 'henrietta.moldovan@learnitude.com', '2708d88742315f216a45', 'Profesor');
INSERT INTO utilizatori VALUES(57, 'Albulescu', 'Ileana', 'ileana.albulescu@learnitude.com', '307a95af95cf491866ac', 'Elev');
INSERT INTO utilizatori VALUES(58, 'Banica', 'Julia', 'julia.banica@learnitude.com', '39d5865288930a9aeccf', 'Student');
INSERT INTO utilizatori VALUES(59, 'Bejan', 'Klara', 'klara.bejan@learnitude.com', '0076eeccdb7e2614adb2', 'Profesor');
INSERT INTO utilizatori VALUES(60, 'Carp', 'Liviu', 'liviu.carp@learnitude.com', '522de4e9ade6cd9e6cfe', 'Elev');
INSERT INTO utilizatori VALUES(61, 'Dan', 'Mircea', 'mircea.dan@learnitude.com', '0106c23464e5bcffe84e', 'Student');
INSERT INTO utilizatori VALUES(62, 'Dragomir', 'Norbert', 'norbert.dragomir@learnitude.com', '4d43534c665b76a8351f', 'Profesor');
INSERT INTO utilizatori VALUES(63, 'Dumitrache', 'Ovidiu', 'ovidiu.dumitrache@learnitude.com', 'b0054679d7b02c642475', 'Elev');
INSERT INTO utilizatori VALUES(64, 'Enache', 'Petru', 'petru.enache@learnitude.com', 'fe8797623604e5a8a195', 'Student');
INSERT INTO utilizatori VALUES(65, 'Fieraru', 'Razvan', 'razvan.fieraru@learnitude.com', '48b9b4fea799147dc23c', 'Profesor');
INSERT INTO utilizatori VALUES(66, 'Galan', 'Silviu', 'silviu.galan@learnitude.com', 'f830754c89ba68863605', 'Elev');
INSERT INTO utilizatori VALUES(67, 'Hagi', 'Teodor', 'teodor.hagi@learnitude.com', '92ee6098beaa8122b49e', 'Student');
INSERT INTO utilizatori VALUES(68, 'Ilie', 'Vasile', 'vasile.ilie@learnitude.com', 'f8659e422518a27e6263', 'Profesor');
INSERT INTO utilizatori VALUES(69, 'Jordan', 'Virgil', 'virgil.jordan@learnitude.com', 'de4cf0615e058b0f77ee', 'Elev');
INSERT INTO utilizatori VALUES(70, 'Kovacs', 'Amalia', 'amalia.kovacs@learnitude.com', 'bbbff113e2f247129773', 'Student');
INSERT INTO utilizatori VALUES(71, 'Lazar', 'Beatrice', 'beatrice.lazar@learnitude.com', '762a53d7e3d7e5045ca4', 'Profesor');
INSERT INTO utilizatori VALUES(72, 'Macedon', 'Catalina', 'catalina.macedon@learnitude.com', 'd4be6d6cc5e7c0b9af1a', 'Elev');
INSERT INTO utilizatori VALUES(73, 'Nae', 'Delia', 'delia.nae@learnitude.com', 'bd8c07c05f13a7430ead', 'Student');
INSERT INTO utilizatori VALUES(74, 'Oprea', 'Elena', 'elena.oprea@learnitude.com', '6c712bfd6248a9d68ed9', 'Profesor');
INSERT INTO utilizatori VALUES(75, 'Pirvu', 'Francesca', 'francesca.pirvu@learnitude.com', 'c93b972afe390ca6af7f', 'Elev');
INSERT INTO utilizatori VALUES(76, 'Rusu', 'Gloria', 'gloria.rusu@learnitude.com', 'c1f6b388d9dfd43f9810', 'Student');
INSERT INTO utilizatori VALUES(77, 'Sandu', 'Helena', 'helena.sandu@learnitude.com', 'b42535fc9b37931881fe', 'Profesor');
INSERT INTO utilizatori VALUES(78, 'Simion', 'Ingrid', 'ingrid.simion@learnitude.com', '945a19269fa6bb647f84', 'Elev');
INSERT INTO utilizatori VALUES(79, 'Tataru', 'Joana', 'joana.tataru@learnitude.com', 'd88483f02dcdd2e7b240', 'Student');
INSERT INTO utilizatori VALUES(80, 'Ungureanu', 'Livia', 'livia.ungureanu@learnitude.com', '918967f82e4755581f29', 'Profesor');
INSERT INTO utilizatori VALUES(81, 'Varga', 'Monica', 'monica.varga@learnitude.com', '1d01d32f07cb0df904cc', 'Elev');
INSERT INTO utilizatori VALUES(82, 'Vladimirescu', 'Nadia', 'nadia.vladimirescu@learnitude.com', 'ccbe1e50e655bcdc34a3', 'Student');
INSERT INTO utilizatori VALUES(83, 'Zaharia', 'Otilia', 'otilia.zaharia@learnitude.com', '9fda9d1cd61a2e46f1d1', 'Profesor');
INSERT INTO utilizatori VALUES(84, 'Balint', 'Patricia', 'patricia.balint@learnitude.com', '7d4114e77450e31bdf73', 'Elev');
INSERT INTO utilizatori VALUES(85, 'Cernat', 'Rebeca', 'rebeca.cernat@learnitude.com', 'f25df646fbb1133d1b03', 'Student');
INSERT INTO utilizatori VALUES(86, 'Damian', 'Sonia', 'sonia.damian@learnitude.com', '74c6011d9800e56bf1bc', 'Profesor');
INSERT INTO utilizatori VALUES(87, 'Ene', 'Tania', 'tania.ene@learnitude.com', '610116607c6bcb7fff5d', 'Elev');
INSERT INTO utilizatori VALUES(88, 'Farcas', 'Valeria', 'valeria.farcas@learnitude.com', '970812e1514c9c59eb96', 'Student');
INSERT INTO utilizatori VALUES(89, 'Grosu', 'Violeta', 'violeta.grosu@learnitude.com', '40e2bb57d94cfa337bbf', 'Profesor');
INSERT INTO utilizatori VALUES(90, 'Horvat', 'Aurel', 'aurel.horvat@learnitude.com', 'd7aecd7acbf8e191f4c1', 'Elev');
INSERT INTO utilizatori VALUES(91, 'Iacob', 'Cosmin', 'cosmin.iacob@learnitude.com', '68ae5b2036723bc492a7', 'Student');
INSERT INTO utilizatori VALUES(92, 'Jurca', 'Dumitru', 'dumitru.jurca@learnitude.com', '4d2f52a61da2ee1514b5', 'Profesor');
INSERT INTO utilizatori VALUES(93, 'Kiss', 'Emil', 'emil.kiss@learnitude.com', '81ec2bb460e22322a41a', 'Elev');
INSERT INTO utilizatori VALUES(94, 'Lungu', 'Felix', 'felix.lungu@learnitude.com', '3ea9dfb4cd8f7ee54712', 'Student');
INSERT INTO utilizatori VALUES(95, 'Man', 'Grigore', 'grigore.man@learnitude.com', '4ba72d86c2d1f6e222ab', 'Profesor');
INSERT INTO utilizatori VALUES(96, 'Negoi', 'Horia', 'horia.negoi@learnitude.com', '9ee4ded6b1c66a73c8a6', 'Elev');
INSERT INTO utilizatori VALUES(97, 'Olariu', 'Iosif', 'iosif.olariu@learnitude.com', '2996a01590b9d0300288', 'Student');
INSERT INTO utilizatori VALUES(98, 'Petru', 'Jean', 'jean.petru@learnitude.com', '4d3e3fec40ded8ad6c38', 'Profesor');
INSERT INTO utilizatori VALUES(99, 'Raileanu', 'Karl', 'karl.raileanu@learnitude.com', 'f04ee7b8aa5d08d978ac', 'Elev');

-- SELECT * FROM utilizatori;

-- TABELA ELEVI
INSERT INTO elevi VALUES(0, 0, 'Uman', '11');
INSERT INTO elevi VALUES(3, 3, 'Uman', '11');
INSERT INTO elevi VALUES(6, 6, 'Uman', '12');
INSERT INTO elevi VALUES(9, 9, 'Real', '9');
INSERT INTO elevi VALUES(12, 12, 'Uman', '11');
INSERT INTO elevi VALUES(15, 15, 'Real', '12');
INSERT INTO elevi VALUES(18, 18, 'Real', '12');
INSERT INTO elevi VALUES(21, 21, 'Uman', '11');
INSERT INTO elevi VALUES(24, 24, 'Uman', '9');
INSERT INTO elevi VALUES(27, 27, 'Uman', '9');
INSERT INTO elevi VALUES(30, 30, 'Real', '9');
INSERT INTO elevi VALUES(33, 33, 'Uman', '11');
INSERT INTO elevi VALUES(36, 36, 'Uman', '10');
INSERT INTO elevi VALUES(39, 39, 'Uman', '9');
INSERT INTO elevi VALUES(42, 42, 'Real', '10');
INSERT INTO elevi VALUES(45, 45, 'Real', '9');
INSERT INTO elevi VALUES(48, 48, 'Real', '12');
INSERT INTO elevi VALUES(51, 51, 'Real', '9');
INSERT INTO elevi VALUES(54, 54, 'Uman', '12');
INSERT INTO elevi VALUES(57, 57, 'Uman', '10');
INSERT INTO elevi VALUES(60, 60, 'Real', '12');
INSERT INTO elevi VALUES(63, 63, 'Real', '10');
INSERT INTO elevi VALUES(66, 66, 'Uman', '11');
INSERT INTO elevi VALUES(69, 69, 'Uman', '10');
INSERT INTO elevi VALUES(72, 72, 'Uman', '10');
INSERT INTO elevi VALUES(75, 75, 'Uman', '10');
INSERT INTO elevi VALUES(78, 78, 'Real', '12');
INSERT INTO elevi VALUES(81, 81, 'Real', '11');
INSERT INTO elevi VALUES(84, 84, 'Uman', '12');
INSERT INTO elevi VALUES(87, 87, 'Uman', '10');
INSERT INTO elevi VALUES(90, 90, 'Real', '9');
INSERT INTO elevi VALUES(93, 93, 'Uman', '12');
INSERT INTO elevi VALUES(96, 96, 'Uman', '11');
INSERT INTO elevi VALUES(99, 99, 'Uman', '11');

-- SELECT id_elev, profil, clasa FROM elevi;

-- TABELA STUDENTI
INSERT INTO studenti VALUES(1, 1, 'Informatica', 'I');
INSERT INTO studenti VALUES(4, 4, 'Istorie', 'I');
INSERT INTO studenti VALUES(7, 7, 'Informatica', 'II');
INSERT INTO studenti VALUES(10, 10, 'Litere', 'I');
INSERT INTO studenti VALUES(13, 13, 'Litere', 'II');
INSERT INTO studenti VALUES(16, 16, 'Litere', 'I');
INSERT INTO studenti VALUES(19, 19, 'Matematica', 'II');
INSERT INTO studenti VALUES(22, 22, 'Litere', 'III');
INSERT INTO studenti VALUES(25, 25, 'Litere', 'II');
INSERT INTO studenti VALUES(28, 28, 'Istorie', 'III');
INSERT INTO studenti VALUES(31, 31, 'Istorie', 'II');
INSERT INTO studenti VALUES(34, 34, 'Matematica', 'III');
INSERT INTO studenti VALUES(37, 37, 'Informatica', 'III');
INSERT INTO studenti VALUES(40, 40, 'Litere', 'III');
INSERT INTO studenti VALUES(43, 43, 'Litere', 'III');
INSERT INTO studenti VALUES(46, 46, 'Litere', 'II');
INSERT INTO studenti VALUES(49, 49, 'Informatica', 'II');
INSERT INTO studenti VALUES(52, 52, 'Istorie', 'III');
INSERT INTO studenti VALUES(55, 55, 'Litere', 'I');
INSERT INTO studenti VALUES(58, 58, 'Istorie', 'III');
INSERT INTO studenti VALUES(61, 61, 'Matematica', 'I');
INSERT INTO studenti VALUES(64, 64, 'Litere', 'I');
INSERT INTO studenti VALUES(67, 67, 'Matematica', 'III');
INSERT INTO studenti VALUES(70, 70, 'Litere', 'II');
INSERT INTO studenti VALUES(73, 73, 'Istorie', 'II');
INSERT INTO studenti VALUES(76, 76, 'Istorie', 'II');
INSERT INTO studenti VALUES(79, 79, 'Istorie', 'III');
INSERT INTO studenti VALUES(82, 82, 'Informatica', 'I');
INSERT INTO studenti VALUES(85, 85, 'Istorie', 'III');
INSERT INTO studenti VALUES(88, 88, 'Informatica', 'III');
INSERT INTO studenti VALUES(91, 91, 'Informatica', 'III');
INSERT INTO studenti VALUES(94, 94, 'Matematica', 'III');
INSERT INTO studenti VALUES(97, 97, 'Informatica', 'III');

-- SELECT id_student, specializare, an_studiu FROM studenti;

-- TABELA PROFESORI
INSERT INTO profesori VALUES(2, 2, 'Informatica');
INSERT INTO profesori VALUES(5, 5, 'Informatica');
INSERT INTO profesori VALUES(8, 8, 'Matematica');
INSERT INTO profesori VALUES(11, 11, 'Istorie');
INSERT INTO profesori VALUES(14, 14, 'Litere');
INSERT INTO profesori VALUES(17, 17, 'Matematica');
INSERT INTO profesori VALUES(20, 20, 'Istorie');
INSERT INTO profesori VALUES(23, 23, 'Litere');
INSERT INTO profesori VALUES(26, 26, 'Litere');
INSERT INTO profesori VALUES(29, 29, 'Informatica');
INSERT INTO profesori VALUES(32, 32, 'Litere');
INSERT INTO profesori VALUES(35, 35, 'Litere');
INSERT INTO profesori VALUES(38, 38, 'Litere');
INSERT INTO profesori VALUES(41, 41, 'Litere');
INSERT INTO profesori VALUES(44, 44, 'Informatica');
INSERT INTO profesori VALUES(47, 47, 'Litere');
INSERT INTO profesori VALUES(50, 50, 'Matematica');
INSERT INTO profesori VALUES(53, 53, 'Istorie');
INSERT INTO profesori VALUES(56, 56, 'Informatica');
INSERT INTO profesori VALUES(59, 59, 'Litere');
INSERT INTO profesori VALUES(62, 62, 'Informatica');
INSERT INTO profesori VALUES(65, 65, 'Matematica');
INSERT INTO profesori VALUES(68, 68, 'Matematica');
INSERT INTO profesori VALUES(71, 71, 'Litere');
INSERT INTO profesori VALUES(74, 74, 'Istorie');
INSERT INTO profesori VALUES(77, 77, 'Litere');
INSERT INTO profesori VALUES(80, 80, 'Informatica');
INSERT INTO profesori VALUES(83, 83, 'Matematica');
INSERT INTO profesori VALUES(86, 86, 'Informatica');
INSERT INTO profesori VALUES(89, 89, 'Matematica');
INSERT INTO profesori VALUES(92, 92, 'Matematica');
INSERT INTO profesori VALUES(95, 95, 'Istorie');
INSERT INTO profesori VALUES(98, 98, 'Istorie');

-- SELECT id_profesor, specializare FROM profesori;

-- TABELA CERTIFICATE
INSERT INTO certificate VALUES(0, 'Rezolvitor junior', 'Ai rezolvat 5 probleme!', 5, 'General');
INSERT INTO certificate VALUES(1, 'Rezolvitor avansat', 'Ai rezolvat 10 probleme!', 10, 'General');
INSERT INTO certificate VALUES(2, 'Rezolvitor expert', 'Ai rezolvat 15 probleme!', 15, 'General');
INSERT INTO certificate VALUES(3, 'Pseudocod', 'Ai rezolvat 1 problema de informatica!', 1, 'Informatica');
INSERT INTO certificate VALUES(4, 'Algoritmi fundamentali', 'Ai rezolvat 5 probleme de informatica!', 5, 'Informatica');
INSERT INTO certificate VALUES(5, 'Premiul Turing', 'Ai rezolvat 10 probleme de informatica!', 10, 'Informatica');
INSERT INTO certificate VALUES(6, '1+1', 'Ai rezolvat 1 problema de matematica!', 1, 'Matematica');
INSERT INTO certificate VALUES(7, 'Pitagora', 'Ai rezolvat 5 probleme de matematica!', 5, 'Matematica');
INSERT INTO certificate VALUES(8, 'Medalia Fields', 'Ai rezolvat 10 probleme de matematica!', 10, 'Matematica');
INSERT INTO certificate VALUES(9, 'Alfabet', 'Ai rezolvat 1 problema de Litere!', 1, 'Litere');
INSERT INTO certificate VALUES(10, 'Eminescu', 'Ai rezolvat 5 probleme de Litere!', 5, 'Litere');
INSERT INTO certificate VALUES(11, 'Premiul Nobel', 'Ai rezolvat 10 probleme de Litere!', 10, 'Litere');
INSERT INTO certificate VALUES(12, 'Aventura in trecut', 'Ai rezolvat 1 problema de Istorie!', 1, 'Istorie');
INSERT INTO certificate VALUES(13, 'Explorator', 'Ai rezolvat 5 probleme de Istorie!', 5, 'Istorie');
INSERT INTO certificate VALUES(14, 'Premiul Pulitzer', 'Ai rezolvat 10 probleme de Istorie!', 10, 'Istorie');

-- SELECT * FROM certificate;

-- TABELA UTILIZATORI_DEBLOCHEAZA_CERTIFICATE
INSERT INTO utilizatori_deblocheaza_certif VALUES(seq_debloc_certif.NEXTVAL, 1, 3, TO_DATE('2024-02-12 14:21', 'YYYY-MM-DD HH24:MI'));
INSERT INTO utilizatori_deblocheaza_certif VALUES(seq_debloc_certif.NEXTVAL, 1, 4, TO_DATE('2024-02-12 17:33', 'YYYY-MM-DD HH24:MI'));
INSERT INTO utilizatori_deblocheaza_certif VALUES(seq_debloc_certif.NEXTVAL, 1, 0, TO_DATE('2024-02-12 17:33', 'YYYY-MM-DD HH24:MI'));
INSERT INTO utilizatori_deblocheaza_certif VALUES(seq_debloc_certif.NEXTVAL, 21, 9, TO_DATE('2024-02-19 17:00', 'YYYY-MM-DD HH24:MI'));
INSERT INTO utilizatori_deblocheaza_certif VALUES(seq_debloc_certif.NEXTVAL, 40, 9, TO_DATE('2024-02-26 09:37', 'YYYY-MM-DD HH24:MI'));
INSERT INTO utilizatori_deblocheaza_certif VALUES(seq_debloc_certif.NEXTVAL, 40, 10, TO_DATE('2024-02-26 11:17', 'YYYY-MM-DD HH24:MI'));
INSERT INTO utilizatori_deblocheaza_certif VALUES(seq_debloc_certif.NEXTVAL, 40, 0, TO_DATE('2024-02-26 11:17', 'YYYY-MM-DD HH24:MI'));
INSERT INTO utilizatori_deblocheaza_certif VALUES(seq_debloc_certif.NEXTVAL, 40, 11, TO_DATE('2024-03-04 23:12', 'YYYY-MM-DD HH24:MI'));
INSERT INTO utilizatori_deblocheaza_certif VALUES(seq_debloc_certif.NEXTVAL, 40, 1, TO_DATE('2024-03-04 23:12', 'YYYY-MM-DD HH24:MI'));
INSERT INTO utilizatori_deblocheaza_certif VALUES(seq_debloc_certif.NEXTVAL, 19, 6, TO_DATE('2024-03-11 07:49', 'YYYY-MM-DD HH24:MI'));

-- SELECT * FROM utilizatori_deblocheaza_certif;

-- TABELA RESURSE
INSERT INTO resurse VALUES(1, 'Istoria Artei', 'Un document care examinează evoluția artei de-a lungul secolelor.', 'Articol');
INSERT INTO resurse VALUES(2, 'Istoria Românilor', 'Analiză cronologică a evenimentelor majore din istoria românilor.', 'Articol');
INSERT INTO resurse VALUES(3, 'Teoria Numerelor', 'Introducere în teoria numerelor, numere prime, divizibilitate, criptografie.', 'Articol');
INSERT INTO resurse VALUES(4, 'Stilistică și Poetică', 'Explorează stilistica limbii și elementele poetice în literatură.', 'Articol');
INSERT INTO resurse VALUES(5, 'Baze de Date Relaționale', 'Acopera conceptele bazelor de date relaționale și utilizarea lor eficientă.', 'Articol');
INSERT INTO resurse VALUES(6, 'Criticism Literar', 'Discută abordări ale criticismului literar și aplicarea acestora.', 'Video');
INSERT INTO resurse VALUES(7, 'Probabilități și Statistică', 'Bazele teoriei probabilităților și statistică cu aplicații în științe.', 'Articol');
INSERT INTO resurse VALUES(8, 'Algoritmi și Structuri de Date', 'Introducere în algoritmica cu exemple vizuale pentru structuri de date.', 'Video');
INSERT INTO resurse VALUES(9, 'Algebră Linară', 'Compendiu despre conceptele fundamentale ale algebrei liniare.', 'Document');
INSERT INTO resurse VALUES(10, 'Geometrie Diferențială', 'Ghid vizual pentru geometria diferențială și aplicațiile sale.', 'Document');
INSERT INTO resurse VALUES(11, 'Literatură Română Contemporană', 'Investighează perioadele și autorii majori ai literaturii române.', 'Document');
INSERT INTO resurse VALUES(12, 'Istoria Literaturii Române', 'Explorare a perioadelor și autorilor majori ai literaturii române.', 'Articol');
INSERT INTO resurse VALUES(13, 'Fundamentele Programării', 'Explorează principiile scrierii codului și structurile de date.', 'Articol');
INSERT INTO resurse VALUES(14, 'Literatură Comparată', 'Compară lucrări literare oferind perspectivă asupra influențelor culturale.', 'Document');
INSERT INTO resurse VALUES(15, 'Istoria Civilizațiilor Antice', 'Explorează civilizațiile antice și originile societății moderne.', 'Document');
INSERT INTO resurse VALUES(16, 'Securitatea Informațiilor', 'Tutoriale despre importanța securității informației în era digitală.', 'Document');
INSERT INTO resurse VALUES(17, 'Preistorie și Arheologie', 'Prezintă descoperiri arheologice cheie pentru înțelegerea preistoriei.', 'Video');
INSERT INTO resurse VALUES(18, 'Programare Orientată pe Obiect', 'Despre paradigmele programării orientate pe obiect și aplicațiile lor.', 'Video');
INSERT INTO resurse VALUES(19, 'Analiză Matematică', 'Abordează principiile analizei matematice și rolul lor în matematica modernă.', 'Document');
INSERT INTO resurse VALUES(20, 'Istoria Europei Moderne', 'Documentează dezvoltarea istorică și culturală a Europei moderne.', 'Video');

-- SELECT * FROM resurse;

-- TABELA UTILIZATORI_ACCESEAZA_RESURSE
INSERT INTO utilizatori_acceseaza_resurse VALUES(31, 1);
INSERT INTO utilizatori_acceseaza_resurse VALUES(31, 2);
INSERT INTO utilizatori_acceseaza_resurse VALUES(94, 10);
INSERT INTO utilizatori_acceseaza_resurse VALUES(34, 10);
INSERT INTO utilizatori_acceseaza_resurse VALUES(34, 19);
INSERT INTO utilizatori_acceseaza_resurse VALUES(66, 15);
INSERT INTO utilizatori_acceseaza_resurse VALUES(66, 20);
INSERT INTO utilizatori_acceseaza_resurse VALUES(18, 13);
INSERT INTO utilizatori_acceseaza_resurse VALUES(18, 9);
INSERT INTO utilizatori_acceseaza_resurse VALUES(18, 16);

-- SELECT * FROM utilizatori_acceseaza_resurse;

-- TABELA GRUPURI
INSERT INTO grupuri VALUES(1, 15, 'Code Wizards', 'Grup de programare pentru schimb de idei și rezolvarea problemelor.');
INSERT INTO grupuri VALUES(2, 22, 'Literary Legends', 'Pentru iubitorii de literatură, discuții despre autori și opere.');
INSERT INTO grupuri VALUES(3, 61, 'Math Maratoners', 'Locul pentru discuții de matematică, teoreme și pregătire pentru concursuri.');
INSERT INTO grupuri VALUES(4, 4, 'History Buffs', 'Pentru fascinații de istorie, partajare de resurse și dezbateri istorice.');
INSERT INTO grupuri VALUES(5, 1, 'Digital Designers', 'Grup de design grafic și web, focus pe proiecte practice.');
INSERT INTO grupuri VALUES(6, 19, 'Algebra Allies', 'Dedicat algebrei, de la ecuații la teoria grupurilor.');
INSERT INTO grupuri VALUES(7, 72, 'Poetry Pals', 'Spatiu pentru poeți, scriere, critică și discuții despre poezii.');
INSERT INTO grupuri VALUES(8, 99, 'Ancient Civilizations', 'Explorarea civilizațiilor antice, de la Egipt la Roma.');
INSERT INTO grupuri VALUES(9, 42, 'Programming Prodigies', 'Pentru programatori tineri, focus pe algoritmi și structuri de date.');
INSERT INTO grupuri VALUES(10, 67, 'Calculus Crew', 'Focus pe calcul diferențial și integral pentru studenți și elevi.');
INSERT INTO grupuri VALUES(11, 4, 'Homo Sapiens', 'Grup pentru a analiza evolutia omului de-a lungul istoriei.');

-- SELECT * FROM grupuri;

-- TABELA UTILIZATORI_CREEAZA_GRUPURI
INSERT INTO utilizatori_creeaza_grupuri VALUES(1, 1);
INSERT INTO utilizatori_creeaza_grupuri VALUES(63, 1);
INSERT INTO utilizatori_creeaza_grupuri VALUES(4, 2);
INSERT INTO utilizatori_creeaza_grupuri VALUES(67, 3);
INSERT INTO utilizatori_creeaza_grupuri VALUES(34, 3);
INSERT INTO utilizatori_creeaza_grupuri VALUES(19, 3);
INSERT INTO utilizatori_creeaza_grupuri VALUES(55, 7);

-- SELECT * FROM utilizatori_creeaza_grupuri;

-- TABELA PROBLEME
INSERT INTO probleme VALUES(1, 17, 'Calculati derivata functiei f(x) = 3x^2 - 2x + 1.', 'Mediu', 'Matematica');
INSERT INTO probleme VALUES(2, 29, 'Determinati complexitatea timpului algoritmului de sortare bubble sort.', 'Usor', 'Informatica');
INSERT INTO probleme VALUES(3, 74, 'Detaliati cauzele si consecintele Revolutiei de la 1848 in tarile romane.', 'Mediu', 'Istorie');
INSERT INTO probleme VALUES(4, 71, 'Analizati tema si viziunea despre lume in poezia Luceafarul" de Mihai Eminescu."', 'Dificil', 'Litere');
INSERT INTO probleme VALUES(5, 74, 'Descrieti principalele cauze ale Primului Razboi Mondial.', 'Mediu', 'Istorie');
INSERT INTO probleme VALUES(6, 65, 'Rezolvati ecuatia de gradul 2: x^2 - 5x + 6 = 0.', 'Usor', 'Matematica');
INSERT INTO probleme VALUES(7, 29, 'Implementati o functie recursiva pentru calculul factorialului unui numar.', 'Mediu', 'Informatica');
INSERT INTO probleme VALUES(8, 59, 'Comentati caracterizarea personajului principal din romanul Morometii"."', 'Dificil', 'Litere');
INSERT INTO probleme VALUES(9, 11, 'Explicati impactul Revolutiei Industriale asupra societatii secolului XIX.', 'Mediu', 'Istorie');
INSERT INTO probleme VALUES(10, 8, 'Demonstrati convergenta sirului an = 1/n.', 'Usor', 'Matematica');
INSERT INTO probleme VALUES(11, 56, 'Construiti un algoritm pentru gasirea celui mai scurt drum intr-un graf.', 'Dificil', 'Informatica');
INSERT INTO probleme VALUES(12, 35, 'Analizati figura stilistica predominanta in poezia Plumb" de George Bacovia."', 'Mediu', 'Litere');
INSERT INTO probleme VALUES(13, 98, 'Discutati despre formarea statelor mediuvale romanesti.', 'Usor', 'Istorie');
INSERT INTO probleme VALUES(14, 89, 'Calculati limita la infinit a functiei f(x) = (3x^3 - x^2 + 2) / (2x^3 + 3x - 1).', 'Dificil', 'Matematica');
INSERT INTO probleme VALUES(15, 80, 'Descrieti principiul de functionare al unui sistem de operare.', 'Usor', 'Informatica');
INSERT INTO probleme VALUES(16, 47, 'Explicati semnificatia titlului romanului Ion" de Liviu Rebreanu."', 'Mediu', 'Litere');
INSERT INTO probleme VALUES(17, 53, 'Prezentati principalele evenimente din perioada interbelica.', 'Dificil', 'Istorie');
INSERT INTO probleme VALUES(18, 89, 'Integrati functia f(x) = e^x * sin(x).', 'Dificil', 'Matematica');
INSERT INTO probleme VALUES(19, 29, 'Explorati conceptul de mostenire in programarea orientata obiect.', 'Mediu', 'Informatica');
INSERT INTO probleme VALUES(20, 35, 'Analizati conceptul de neomodernism" in literatura romana."', 'Usor', 'Litere');
INSERT INTO probleme VALUES(21, 8, 'Integrati functia g(x) = x^2 * e^(-x).', 'Mediu', 'Matematica');
INSERT INTO probleme VALUES(22, 29, 'Analizati eficienta algoritmului quicksort.', 'Usor', 'Informatica');
INSERT INTO probleme VALUES(23, 71, 'Identificati temele principale din "Maitreyi".', 'Mediu', 'Litere');
INSERT INTO probleme VALUES(24, 53, 'Explicati rolul Congresului de la Viena.', 'Usor', 'Istorie');
INSERT INTO probleme VALUES(25, 17, 'Aflati solutia inecuatiei x^3 - 3x > 0.', 'Usor', 'Matematica');
INSERT INTO probleme VALUES(26, 29, 'Descrieti un algoritm de hashing eficient.', 'Mediu', 'Informatica');
INSERT INTO probleme VALUES(27, 71, 'Discutati stilul lui Caragiale in "O scrisoare pierduta".', 'Dificil', 'Litere');
INSERT INTO probleme VALUES(28, 98, 'Analizati efectele Reformei Protestante.', 'Mediu', 'Istorie');
INSERT INTO probleme VALUES(29, 17, 'Calculati aria sub graficul functiei f(x) = sin(x), x ∈ [0, π].', 'Usor', 'Matematica');
INSERT INTO probleme VALUES(30, 80, 'Creeaza o aplicatie CRUD simpla in Python.', 'Usor', 'Informatica');
INSERT INTO probleme VALUES(31, 47, 'Interpretati simbolismul in "Lacul" de Eminescu.', 'Mediu', 'Litere');
INSERT INTO probleme VALUES(32, 11, 'Descrieti cauzele Revolutiei Americane.', 'Usor', 'Istorie');
INSERT INTO probleme VALUES(33, 65, 'Demonstrati identitatea lui Euler pentru poliedre.', 'Dificil', 'Matematica');
INSERT INTO probleme VALUES(34, 80, 'Explicati modelul MVC in dezvoltarea web.', 'Mediu', 'Informatica');
INSERT INTO probleme VALUES(35, 80, 'Analizati naratiunea in "Ultima noapte de dragoste".', 'Dificil', 'Litere');
INSERT INTO probleme VALUES(36, 11, 'Prezentati impactul descoperirilor geografice.', 'Mediu', 'Istorie');
INSERT INTO probleme VALUES(37, 89, 'Studiati seria Taylor pentru e^x.', 'Mediu', 'Matematica');
INSERT INTO probleme VALUES(38, 56, 'Analiza complexitatii algoritmului merge sort.', 'Mediu', 'Informatica');
INSERT INTO probleme VALUES(39, 35, 'Tematica iubirii in "Floare albastra".', 'Usor', 'Litere');
INSERT INTO probleme VALUES(40, 53, 'Sumarizati evenimentele Revolutiei Franceze.', 'Mediu', 'Istorie');

-- SELECT * FROM probleme;

-- TABELA UTILIZATORI_REZOLVA_PROBLEME
INSERT INTO utilizatori_rezolva_probleme VALUES(1, 1, 2, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(2, 1, 7, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(3, 1, 11, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(4, 1, 15, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(5, 1, 19, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(6, 21, 9, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(7, 40, 4, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(8, 40, 8, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(9, 40, 12, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(10, 40, 16, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(11, 40, 20, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(12, 40, 23, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(13, 40, 27, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(14, 40, 31, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(15, 40, 35, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(16, 40, 39, 100);
INSERT INTO utilizatori_rezolva_probleme VALUES(17, 19, 10, 100);

-- SELECT * FROM utilizatori_rezolva_probleme;

-- TABELA CLASE
INSERT INTO clase VALUES(1, 17, 'Algebra Avansata', 'Clasa de matematica pentru nivel avansat.');
INSERT INTO clase VALUES(2, 29, 'Programare in Python', 'Introducere in programare cu Python.');
INSERT INTO clase VALUES(3, 74, 'Istoria Moderna', 'Curs despre evenimentele istorice moderne.');
INSERT INTO clase VALUES(4, 71, 'Literatura Romana', 'Analiza operei literare romanesti.');
INSERT INTO clase VALUES(5, 65, 'Geometrie Descriptiva', 'Studiu geometric si desen tehnic.');
INSERT INTO clase VALUES(6, 29, 'Bazele Informaticii', 'Fundamentele informaticii pentru incepatori.');
INSERT INTO clase VALUES(7, 59, 'Critica Literara', 'Tehnici de critica si analiza literara.');
INSERT INTO clase VALUES(8, 11, 'Istoria Antichitatii', 'Curs despre civilizatiile antice.');
INSERT INTO clase VALUES(9, 89, 'Calcul Diferential', 'Concepte fundamentale in calcul diferential.');
INSERT INTO clase VALUES(10, 56, 'Securitate Cibernetica', 'Principii de securitate in mediul online.');
INSERT INTO clase VALUES(11, 35, 'Istoria Artei', 'Evolutia artei de-a lungul istoriei.');
INSERT INTO clase VALUES(12, 77, 'Poezia Moderna', 'Studiu asupra poeziei moderne si contemporane.');
INSERT INTO clase VALUES(13, 77, 'Poezia Interbelica', 'Studiu asupra poeziei interbelice.');

-- SELECT * FROM clase;

-- TABELA UTILIZATORI_APARTIN_IN_CLASE
INSERT INTO utilizatori_apartin_in_clase VALUES(1, 17);
INSERT INTO utilizatori_apartin_in_clase VALUES(1, 34);
INSERT INTO utilizatori_apartin_in_clase VALUES(1, 67);
INSERT INTO utilizatori_apartin_in_clase VALUES(1, 94);
INSERT INTO utilizatori_apartin_in_clase VALUES(3, 74);
INSERT INTO utilizatori_apartin_in_clase VALUES(3, 31);
INSERT INTO utilizatori_apartin_in_clase VALUES(3, 73);
INSERT INTO utilizatori_apartin_in_clase VALUES(3, 76);
INSERT INTO utilizatori_apartin_in_clase VALUES(12, 77);
INSERT INTO utilizatori_apartin_in_clase VALUES(12, 55);
INSERT INTO utilizatori_apartin_in_clase VALUES(12, 64);

-- SELECT * FROM utilizatori_apartin_in_clase;

-- TABELA TESTE
INSERT INTO teste VALUES(1, 2, 'Fundamente Python', 'Test initial despre conceptele de baza in Python.');
INSERT INTO teste VALUES(2, 9, 'Test Derivate', 'Evaluare bazata pe derivate si aplicatii.');
INSERT INTO teste VALUES(3, 3, 'Revolutii Moderne', 'Test despre revolutiile moderne si impactul lor.');
INSERT INTO teste VALUES(4, 4, 'Romantismul in Literatura', 'Examen despre caracteristicile romantismului.');
INSERT INTO teste VALUES(5, 6, 'Logica Programarii', 'Testeaza logica si algoritmi de baza.');
INSERT INTO teste VALUES(6, 1, 'Algebra Liniara', 'Intrebari despre vectori, matrici si spatii vectoriale.');
INSERT INTO teste VALUES(7, 8, 'Civilizatii Antice', 'Quiz despre Egipt, Grecia si Roma antica.');
INSERT INTO teste VALUES(8, 7, 'Analiza Literara Avansata', 'Test avansat de analiza literara.');
INSERT INTO teste VALUES(9, 10, 'Securitate Web', 'Test bazat pe principiile securitatii web.');
INSERT INTO teste VALUES(10, 5, 'Geometrie Spatiala', 'Evaluare despre geometrie spatiala si proiectii.');
INSERT INTO teste VALUES(11, 11, 'Istoria Artei Moderne', 'Test despre arta moderna si curentele ei.');
INSERT INTO teste VALUES(12, 12, 'Modernism vs. Postmodernism', 'Comparatie intre modernism si postmodernism.');
INSERT INTO teste VALUES(13, 2, 'Structuri de Date', 'Test despre structuri de date in Python.');
INSERT INTO teste VALUES(14, 9, 'Integrare Functii', 'Test bazat pe integrarea functiilor de o variabila.');
INSERT INTO teste VALUES(15, 3, 'Testul Imperiilor', 'Quiz despre marile imperii ale lumii.');
INSERT INTO teste VALUES(16, 6, 'Bazele OOP', 'Test despre conceptele de baza ale programarii orientate pe obiect.');
INSERT INTO teste VALUES(17, 11, 'Barocul in Arta', 'Quiz despre caracteristicile barocului in arta.');
INSERT INTO teste VALUES(18, 1, 'Probleme de Optimizare', 'Test pe probleme de optimizare matematica.');
INSERT INTO teste VALUES(19, 12, 'Poezia Secolului XX', 'Intrebari despre poezia secolului al XX-lea.');

-- SELECT * FROM teste;

-- TABELA UTILIZATORI_LUCREAZA_TESTE
INSERT INTO utilizatori_lucreaza_teste VALUES(1, 31, 3, 9.2);
INSERT INTO utilizatori_lucreaza_teste VALUES(2, 31, 15, 10);
INSERT INTO utilizatori_lucreaza_teste VALUES(3, 73, 3, 8.5);
INSERT INTO utilizatori_lucreaza_teste VALUES(4, 55, 12, 6.4);
INSERT INTO utilizatori_lucreaza_teste VALUES(5, 64, 12, 10);
INSERT INTO utilizatori_lucreaza_teste VALUES(6, 34, 6, 7.3);
INSERT INTO utilizatori_lucreaza_teste VALUES(7, 67, 6, 8.9);
INSERT INTO utilizatori_lucreaza_teste VALUES(8, 94, 6, 4.1);
INSERT INTO utilizatori_lucreaza_teste VALUES(9, 55, 19, 10);
INSERT INTO utilizatori_lucreaza_teste VALUES(10, 64, 19, 3.6);

-- SELECT * FROM utilizatori_lucreaza_teste;

-- TABELA FORUM
INSERT INTO forum VALUES(1, 1, 34, 'Cate solutii aveti la ecuatie?');
INSERT INTO forum VALUES(2, 1, 34, 'Puteti sa imi explicati ultima problema de la test?');
INSERT INTO forum VALUES(3, 1, 67, 'Exista o metoda eficienta pentru calculul determinantilor?');
INSERT INTO forum VALUES(4, 3, 31, 'Care sunt cauzele Revolutiei Franceze?');
INSERT INTO forum VALUES(5, 12, 55, 'Cum interpretati Luceafarul de Mihai Eminescu?');

-- SELECT * FROM forum;

-- TABELA POSTARI
INSERT INTO postari VALUES(1, 1, 67, 'Eu am gasit 2 solutii.');
INSERT INTO postari VALUES(2, 2, 67, 'Se rezolva exact ca ultima problema de la Seminarul 4.');
INSERT INTO postari VALUES(3, 3, 34, 'Uita-te peste expansiunea Laplace sau peste eliminarea Gaussiana.');
INSERT INTO postari VALUES(4, 4, 73, 'Franta se confrunta cu o criza financiara grava...');
INSERT INTO postari VALUES(5, 4, 76, 'Nu uita si de faptul ca societatea franceza era nemultumita!');

-- SELECT * FROM postari;

COMMIT;


~~~ Cerinta 6
-- Cerinta cu numarul 6
/* 
Formulați în limbaj natural o problemă pe care să o rezolvați folosind un subprogram stocat
independent care să utilizeze toate cele 3 tipuri de colecții studiate. Apelați subprogramul.
*/

/*
Pentru fiecare clasa afisati forumurile ei, iar pentru fiecare forum, toate postarile lui.
*/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE cerinta_6 IS
    TYPE t_clase_varray IS VARRAY(100) OF VARCHAR2(100);
    clase t_clase_varray := t_clase_varray();
    
    TYPE t_forum_record IS RECORD (
        id_forum INT,
        subiect VARCHAR2(100)
    );
    TYPE t_forum_nt IS TABLE OF t_forum_record;
    
    TYPE t_postare_record IS RECORD (
        id_postare INT,
        continut VARCHAR2(150)
    );
    TYPE t_postare_tab IS TABLE OF t_postare_record INDEX BY BINARY_INTEGER;

    forumuri t_forum_nt;
    postari t_postare_tab;
BEGIN
    SELECT nume_clasa BULK COLLECT INTO clase FROM (SELECT nume_clasa FROM clase);
    
    FOR i IN 1..clase.LAST LOOP
        DBMS_OUTPUT.PUT_LINE('*Clasa: ' || clase(i));
        
        SELECT id_forum, subiect BULK COLLECT INTO forumuri FROM forum WHERE id_clasa = (SELECT id_clasa FROM clase WHERE nume_clasa = clase(i));
        
        IF forumuri.COUNT = 0 THEN
            DBMS_OUTPUT.PUT_LINE('---Clasa nu are forumuri inca!');
        ELSE
            FOR j IN 1..forumuri.COUNT LOOP
                DBMS_OUTPUT.PUT_LINE('---Forum: ' || forumuri(j).subiect);
                
                SELECT id_postare, continut BULK COLLECT INTO postari FROM postari WHERE id_forum = forumuri(j).id_forum;
                
                IF postari.COUNT = 0 THEN
                    DBMS_OUTPUT.PUT_LINE('------Forumul nu are postari inca!');
                ELSE
                    FOR k IN 1..postari.COUNT LOOP
                        DBMS_OUTPUT.PUT_LINE('------Postare: ' || postari(k).continut);
                    END LOOP;
                END IF;
            END LOOP;
        END IF;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Eroare: ' || SQLERRM);
END cerinta_6;
/

BEGIN
    cerinta_6;
END;
/


~~~ Cerinta 7
-- Cerinta cu numarul 7
/*
Formulați în limbaj natural o problemă pe care să o rezolvați folosind un subprogram stocat
independent care să utilizeze 2 tipuri diferite de cursoare studiate, unul dintre acestea fiind cursor 
parametrizat, dependent de celălalt cursor. Apelați subprogramul.
*/

/*
Deoarece fiecare profesor doreste sa verifice daca elevii/studentii lor sunt interesati de materiale suplimentare,
cat si pentru a vedea care sunt resursele populare se cer urmatoarele:
Pentru fiecare profesor care detine o clasa (care are elevi/studenti), afiseaza resursele accesate de elevii/studentii 
din clasa respectiva.
La fiecare resursa arata numarul maxim total de accesari.
*/

CREATE OR REPLACE PROCEDURE cerinta_7 IS
    CURSOR c_profesori IS
        SELECT p.id_profesor, u.nume AS nume_profesor, u.prenume AS prenume_profesor, c.nume_clasa, c.id_clasa
        FROM profesori p
        JOIN utilizatori u ON p.id_utilizator = u.id_utilizator
        JOIN clase c ON p.id_profesor = c.id_profesor
        WHERE EXISTS (
            SELECT 1
            FROM utilizatori_apartin_in_clase uac
            WHERE uac.id_clasa = c.id_clasa
        );
    
    CURSOR c_resurse (p_id_clasa INT) IS
        SELECT r.id_resursa, r.titlu, u.nume, u.prenume, u.tip_utilizator
        FROM utilizatori_acceseaza_resurse uar
        JOIN resurse r ON uar.id_resursa = r.id_resursa
        JOIN utilizatori u ON uar.id_utilizator = u.id_utilizator
        JOIN utilizatori_apartin_in_clase uac ON u.id_utilizator = uac.id_utilizator
        WHERE uac.id_clasa = p_id_clasa
        GROUP BY r.id_resursa, r.titlu, u.nume, u.prenume, u.tip_utilizator;
    
    CURSOR c_accesari_totale_resurse (p_id_resursa INT) IS
        SELECT COUNT(*) AS nr_accesari_totale
        FROM utilizatori_acceseaza_resurse
        WHERE id_resursa = p_id_resursa;
    
    v_nr_accesari_totale INT;
    v_tip_utilizator VARCHAR2(10);
    
BEGIN
    FOR v_profesor IN c_profesori LOOP
        DBMS_OUTPUT.PUT_LINE('*Profesor ' || v_profesor.nume_profesor || ' ' || v_profesor.prenume_profesor || ' - Clasa: ' || v_profesor.nume_clasa);
        
        DECLARE
            v_resurse_gasite BOOLEAN := FALSE;
        BEGIN
            FOR v_resursa IN c_resurse(v_profesor.id_clasa) LOOP
                v_resurse_gasite := TRUE;
                
                IF v_resursa.tip_utilizator = 'Elev' THEN
                    v_tip_utilizator := 'elevul';
                ELSIF v_resursa.tip_utilizator = 'Student' THEN
                    v_tip_utilizator := 'studentul';
                ELSE
                    v_tip_utilizator := 'utilizatorul';
                END IF;
                
                OPEN c_accesari_totale_resurse(v_resursa.id_resursa);
                FETCH c_accesari_totale_resurse INTO v_nr_accesari_totale;
                CLOSE c_accesari_totale_resurse;
                
                DBMS_OUTPUT.PUT_LINE('---Resursa ' || v_resursa.titlu || ' accesata de ' || v_tip_utilizator || ' ' || v_resursa.nume || ' ' || v_resursa.prenume);
                DBMS_OUTPUT.PUT_LINE('------Accesari totale resursa: ' || v_nr_accesari_totale);
            END LOOP;
            
            IF NOT v_resurse_gasite THEN
                DBMS_OUTPUT.PUT_LINE('~In aceasta clasa nimeni nu a accesat resurse!');
            END IF;
        END;
    END LOOP;
END cerinta_7;
/

BEGIN
    cerinta_7;
END;
/


~~~ Cerinta 8
-- Cerinta cu numarul 8

/*
Formulați în limbaj natural o problemă pe care să o rezolvați folosind un subprogram stocat
independent de tip funcție care să utilizeze într-o singură comandă SQL 3 dintre tabelele definite. 
Definiți minim 2 excepții proprii. Apelați subprogramul astfel încât să evidențiați toate cazurile 
definite și tratate
*/

/*
Profesorii vor sa verifice performanta clasei la anumite teste.
Astfel, sa se afiseze media fiecarui test dintr-o clasa.
*/

CREATE OR REPLACE FUNCTION cerinta_8(id_clasa_param IN INT) RETURN SYS_REFCURSOR
IS
    cursorRezultat SYS_REFCURSOR;
    ClasaInexistenta EXCEPTION;
    ClasaFaraTeste EXCEPTION;
    clasaCount INT;
    testeCount INT;
BEGIN
    SELECT COUNT(*) INTO clasaCount FROM clase WHERE id_clasa = id_clasa_param;
    IF clasaCount = 0 THEN
        RAISE ClasaInexistenta;
    END IF;

    SELECT COUNT(*) INTO testeCount FROM teste WHERE id_clasa = id_clasa_param;
    IF testeCount = 0 THEN
        RAISE ClasaFaraTeste;
    END IF;

    OPEN cursorRezultat FOR
        SELECT c.nume_clasa AS "Clasa", t.titlu AS "TitluTest", COALESCE(TRUNC(AVG(ult.nota), 2), 0) AS "MediaNotelor"
        FROM clase c
        INNER JOIN teste t ON c.id_clasa = t.id_clasa
        LEFT JOIN utilizatori_lucreaza_teste ult ON t.id_test = ult.id_test
        WHERE c.id_clasa = id_clasa_param
        GROUP BY c.nume_clasa, t.titlu;

    RETURN cursorRezultat;
EXCEPTION
    WHEN ClasaInexistenta THEN
        DBMS_OUTPUT.PUT_LINE('Clasa cu ID-ul ' || id_clasa_param || ' nu există.');
        RETURN NULL;
    WHEN ClasaFaraTeste THEN
        DBMS_OUTPUT.PUT_LINE('Clasa cu ID-ul ' || id_clasa_param || ' nu conține teste.');
        RETURN NULL;
END;
/


DECLARE
    curs SYS_REFCURSOR;
    clasa VARCHAR2(100);
    titluTest VARCHAR2(100);
    mediaNotelor NUMBER;
BEGIN
-- Clasa inexistenta
    curs := cerinta_8(14);
-- Clasa fara teste
    -- curs := cerinta_8(13);
-- Functioneaza
    -- curs := cerinta_8(1);

    LOOP
        FETCH curs INTO clasa, titluTest, mediaNotelor;
        EXIT WHEN curs%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Clasa ' || clasa || ' --- Medie test ' || titluTest || ': ' || mediaNotelor);
    END LOOP;

    CLOSE curs;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('A apărut o eroare: ' || SQLERRM);
        IF curs IS NOT NULL THEN
            CLOSE curs;
        END IF;
END;
/


~~~ Cerinta 9
-- Cerinta cu numarul 9
/*
Formulați în limbaj natural o problemă pe care să o rezolvați folosind un subprogram stocat 
independent de tip procedură care să utilizeze într-o singură comandă SQL 5 dintre tabelele 
definite. Tratați toate excepțiile care pot apărea, incluzând excepțiile NO_DATA_FOUND și 
TOO_MANY_ROWS. Apelați subprogramul astfel încât să evidențiați toate cazurile tratate.
*/

/*
Intrucat scopul grupurilor este de a aduna oameni pasionati de acelasi subiect, creatorii grupurilor
doresc sa filtreze grupurile de membrii inactivi. Un membru inactiv se considera daca nu are resurse
accesate, nu este intr-o clasa si nu are probleme lucrate. Desigur, inclusiv creatorul grupului se poate
afla pe lista membrilor inactivi.

Exceptiile care pot aparea:
- id_utilizator este profesor -> nu are voie sa acceseze grupuri;
- id_utilizator nu are grupuri sau nu este in baza de date (NO_DATA_FOUND);
- id_utilizator are mai multe grupuri (TOO_MANY_ROWS) -> se continua cu id-ul grupului cel mai mic.
*/

CREATE OR REPLACE PROCEDURE cerinta_9(p_id_utilizator INT) IS
    v_tip_utilizator utilizatori.tip_utilizator%TYPE;
    v_nume_grup grupuri.nume_grup%TYPE;
    v_id_grup INT;
    v_exista_membri_inactivi BOOLEAN := FALSE;
BEGIN
    SELECT tip_utilizator INTO v_tip_utilizator FROM utilizatori WHERE id_utilizator = p_id_utilizator;
    IF v_tip_utilizator = 'Profesor' THEN
        RAISE_APPLICATION_ERROR(-20001, 'Sunteți profesor, nu puteți accesa grupuri.');
    END IF;
    
    BEGIN
        SELECT id_grup INTO v_id_grup FROM grupuri WHERE id_creator = p_id_utilizator;
    EXCEPTION
        WHEN TOO_MANY_ROWS THEN
            SELECT MIN(id_grup) INTO v_id_grup FROM grupuri WHERE id_creator = p_id_utilizator;
            DBMS_OUTPUT.PUT_LINE('Prea multe grupuri găsite. Se folosește grupul cu ID-ul cel mai mic.');
    END;
    
    SELECT nume_grup INTO v_nume_grup FROM grupuri WHERE id_grup = v_id_grup;
    
    FOR r_inactivi IN (
        SELECT u.nume, u.prenume, u.id_utilizator
        FROM utilizatori u
        JOIN utilizatori_creeaza_grupuri ucg ON u.id_utilizator = ucg.id_utilizator AND ucg.id_grup = v_id_grup
        LEFT JOIN utilizatori_acceseaza_resurse uar ON u.id_utilizator = uar.id_utilizator
        LEFT JOIN utilizatori_apartin_in_clase uaic ON u.id_utilizator = uaic.id_utilizator
        LEFT JOIN utilizatori_rezolva_probleme urp ON u.id_utilizator = urp.id_utilizator
        WHERE uar.id_resursa IS NULL AND uaic.id_clasa IS NULL AND urp.id_problema IS NULL
        GROUP BY u.nume, u.prenume, u.id_utilizator
    ) LOOP
        IF NOT v_exista_membri_inactivi THEN
            DBMS_OUTPUT.PUT_LINE('In grupul ' || v_nume_grup || ' membrii inactivi sunt:');
            v_exista_membri_inactivi := TRUE;
        END IF;
        DBMS_OUTPUT.PUT_LINE('--- ' || r_inactivi.nume || ' ' || r_inactivi.prenume || ', ID: ' || r_inactivi.id_utilizator);
    END LOOP;
    
    IF NOT v_exista_membri_inactivi THEN
        DBMS_OUTPUT.PUT_LINE('In grupul ' || v_nume_grup || ' toți sunt activi!');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Utilizatorul nu este în baza de date sau nu are grupuri.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Eroare neașteptată: ' || SQLERRM);
END;
/

-- TOO_MANY_ROWS
BEGIN
    cerinta_9(4);
END;
/

-- NO_DATA_FOUND
BEGIN
    cerinta_9(1001);
END;
/

-- PROFESOR
BEGIN
    cerinta_9(2);
END;
/

-- CAZ INACTIVI
BEGIN
    cerinta_9(15);
END;
/

-- CAZ ACTIVI
BEGIN
    cerinta_9(1);
END;
/


~~~ Cerinta 10
-- Cerinta cu numarul 10

/*
Definiți un trigger de tip LMD la nivel de comandă. Declanșați trigger-ul.
*/

/*
Pentru a se evita spam-ul pe forumuri, s-a decis sa se impuna o limita de maxim
10 postari / forum. In acest fel, se pot controla mai usor topic-urile discutate.
*/

CREATE OR REPLACE TRIGGER cerinta_10
BEFORE INSERT ON postari
FOR EACH ROW
DECLARE
    v_nr_postari INT;
BEGIN
    SELECT COUNT(*)
    INTO v_nr_postari
    FROM postari
    WHERE id_forum = :NEW.id_forum;

    IF v_nr_postari >= 10 THEN
        RAISE_APPLICATION_ERROR(-20000, 'Pentru a se evita spam-ul, nu se pot insera mai mult de 10 postari!');
    END IF;
END;
/

-- NU SE DECLANSEAZA (SUNTEM IN LIMITA DE POSTARI)
BEGIN
    INSERT INTO postari VALUES(6, 4, 76, 'Postarea 3');
    INSERT INTO postari VALUES(7, 4, 76, 'Postarea 4');
    INSERT INTO postari VALUES(8, 4, 76, 'Postarea 5');
    INSERT INTO postari VALUES(9, 4, 76, 'Postarea 6');
    INSERT INTO postari VALUES(10, 4, 76, 'Postarea 7');
    INSERT INTO postari VALUES(11, 4, 76, 'Postarea 8');
    INSERT INTO postari VALUES(12, 4, 76, 'Postarea 9');
    INSERT INTO postari VALUES(13, 4, 76, 'Postarea 10');
END;
/

SELECT * FROM postari;

-- ACUM SE DECLANSEAZA
BEGIN
    INSERT INTO postari VALUES(14, 4, 76, 'Postare 11 - trigger');
END;
/

DROP TRIGGER cerinta_10;


~~~ Cerinta 11
-- Cerinta cu numarul 11

/*
Definiți un trigger de tip LMD la nivel de linie. Declanșați trigger-ul.
*/

/*
Pentru a promova excelenta, noi certificate se vor adauga pe platforma.
Cu toate acestea, pentru fiecare certificat nou, in cazul in care sunt deja utilizatori
eligibili, sa fie adaugat acel certificat pe lista lor de certificate deblocate.

Daca disciplina certificatului este 'General', atunci numarul total de probleme indiferent de
domeniu, trebuie sa fie >= de pragul necesar.
Daca disciplina certificatului este un domeniu specific, numarul de probleme trebuie sa fie
din acel de domeniu si sa respecte pragul.
*/

CREATE OR REPLACE TRIGGER cerinta_11
AFTER INSERT ON certificate
FOR EACH ROW
DECLARE
    v_nr_probleme INT;
BEGIN
    IF :NEW.disciplina = 'General' THEN
        FOR r_user IN (SELECT id_utilizator FROM utilizatori) LOOP
            SELECT COUNT(*)
            INTO v_nr_probleme
            FROM utilizatori_rezolva_probleme urp
            JOIN probleme p ON urp.id_problema = p.id_problema
            WHERE urp.id_utilizator = r_user.id_utilizator;

            IF v_nr_probleme >= :NEW.prag_deblocare THEN
                INSERT INTO utilizatori_deblocheaza_certif (id_deblocare, id_utilizator, id_certificat, data_obtinerii)
                VALUES (seq_debloc_certif.NEXTVAL, r_user.id_utilizator, :NEW.id_certificat, SYSDATE);
            END IF;
        END LOOP;
    ELSE
        FOR r_user IN (SELECT id_utilizator FROM utilizatori) LOOP
            SELECT COUNT(*)
            INTO v_nr_probleme
            FROM utilizatori_rezolva_probleme urp
            JOIN probleme p ON urp.id_problema = p.id_problema
            WHERE urp.id_utilizator = r_user.id_utilizator AND p.disciplina = :NEW.disciplina;

            IF v_nr_probleme >= :NEW.prag_deblocare THEN
                INSERT INTO utilizatori_deblocheaza_certif (id_deblocare, id_utilizator, id_certificat, data_obtinerii)
                VALUES (seq_debloc_certif.NEXTVAL, r_user.id_utilizator, :NEW.id_certificat, SYSDATE);
            END IF;
        END LOOP;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Eroare neașteptată: ' || SQLERRM);
END;
/

SELECT * FROM utilizatori_deblocheaza_certif;

BEGIN
    INSERT INTO certificate VALUES(15, 'Test', '3 probleme rezolvate', 3, 'General');
END;
/

SELECT * FROM utilizatori_deblocheaza_certif;

DROP TRIGGER cerinta_11;


~~~ Cerinta 12
-- Cerinta cu numarul 12

/*
Definiți un trigger de tip LDD. Declanșați trigger-ul.
*/

/*
Un trigger care sa introduca intr-un tabel audit actiunile asupra bazei de date.
*/

DROP TABLE audit_cerinta_12;

CREATE TABLE audit_cerinta_12
    (utilizator     VARCHAR2(30),
    nume_bazadedate VARCHAR2(50),
    eveniment       VARCHAR2(20),
    nume_obiect     VARCHAR2(30),
    data            DATE);

CREATE OR REPLACE TRIGGER cerinta_12
    AFTER CREATE OR DROP OR ALTER ON SCHEMA
BEGIN
    INSERT INTO audit_cerinta_12
    VALUES (SYS.LOGIN_USER, SYS.DATABASE_NAME, SYS.SYSEVENT, 
            SYS.DICTIONARY_OBJ_NAME, SYSDATE);
END;
/

CREATE TABLE trigger_test (
    id_test INT NOT NULL PRIMARY KEY
);

DROP TABLE trigger_test;

SELECT * FROM audit_cerinta_12;

DROP TRIGGER cerinta_12;


~~~ Cerinta 13
-- Cerinta cu numarul 13

/*
Definiți un pachet care să conțină toate obiectele definite în cadrul proiectului.
*/

SET SERVEROUTPUT ON;

CREATE OR REPLACE PACKAGE pachet_learnitude AS

  FUNCTION cerinta_8(id_clasa_param IN INT) RETURN SYS_REFCURSOR;

  PROCEDURE cerinta_6;
  PROCEDURE cerinta_7;
  PROCEDURE cerinta_9(p_id_utilizator INT);

END pachet_learnitude;
/

CREATE OR REPLACE PACKAGE BODY pachet_learnitude AS
-- ~~~ 6 ~~~
    PROCEDURE cerinta_6 IS
        TYPE t_clase_varray IS VARRAY(100) OF VARCHAR2(100);
        clase t_clase_varray := t_clase_varray();
        
        TYPE t_forum_record IS RECORD (
            id_forum INT,
            subiect VARCHAR2(100)
        );
        TYPE t_forum_nt IS TABLE OF t_forum_record;
        
        TYPE t_postare_record IS RECORD (
            id_postare INT,
            continut VARCHAR2(150)
        );
        TYPE t_postare_tab IS TABLE OF t_postare_record INDEX BY BINARY_INTEGER;

        forumuri t_forum_nt;
        postari t_postare_tab;
    BEGIN
        SELECT nume_clasa BULK COLLECT INTO clase FROM (SELECT nume_clasa FROM clase);
        
        FOR i IN 1..clase.LAST LOOP
            DBMS_OUTPUT.PUT_LINE('*Clasa: ' || clase(i));
            
            SELECT id_forum, subiect BULK COLLECT INTO forumuri FROM forum WHERE id_clasa = (SELECT id_clasa FROM clase WHERE nume_clasa = clase(i));
            
            IF forumuri.COUNT = 0 THEN
                DBMS_OUTPUT.PUT_LINE('---Clasa nu are forumuri inca!');
            ELSE
                FOR j IN 1..forumuri.COUNT LOOP
                    DBMS_OUTPUT.PUT_LINE('---Forum: ' || forumuri(j).subiect);
                    
                    SELECT id_postare, continut BULK COLLECT INTO postari FROM postari WHERE id_forum = forumuri(j).id_forum;
                    
                    IF postari.COUNT = 0 THEN
                        DBMS_OUTPUT.PUT_LINE('------Forumul nu are postari inca!');
                    ELSE
                        FOR k IN 1..postari.COUNT LOOP
                            DBMS_OUTPUT.PUT_LINE('------Postare: ' || postari(k).continut);
                        END LOOP;
                    END IF;
                END LOOP;
            END IF;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Eroare: ' || SQLERRM);
    END cerinta_6;
    
-- ~~~ 7 ~~~
    PROCEDURE cerinta_7 IS
        CURSOR c_profesori IS
            SELECT p.id_profesor, u.nume AS nume_profesor, u.prenume AS prenume_profesor, c.nume_clasa, c.id_clasa
            FROM profesori p
            JOIN utilizatori u ON p.id_utilizator = u.id_utilizator
            JOIN clase c ON p.id_profesor = c.id_profesor
            WHERE EXISTS (
                SELECT 1
                FROM utilizatori_apartin_in_clase uac
                WHERE uac.id_clasa = c.id_clasa
            );
        
        CURSOR c_resurse (p_id_clasa INT) IS
            SELECT r.id_resursa, r.titlu, u.nume, u.prenume, u.tip_utilizator
            FROM utilizatori_acceseaza_resurse uar
            JOIN resurse r ON uar.id_resursa = r.id_resursa
            JOIN utilizatori u ON uar.id_utilizator = u.id_utilizator
            JOIN utilizatori_apartin_in_clase uac ON u.id_utilizator = uac.id_utilizator
            WHERE uac.id_clasa = p_id_clasa
            GROUP BY r.id_resursa, r.titlu, u.nume, u.prenume, u.tip_utilizator;
        
        CURSOR c_accesari_totale_resurse (p_id_resursa INT) IS
            SELECT COUNT(*) AS nr_accesari_totale
            FROM utilizatori_acceseaza_resurse
            WHERE id_resursa = p_id_resursa;
        
        v_nr_accesari_totale INT;
        v_tip_utilizator VARCHAR2(10);
        
    BEGIN
        FOR v_profesor IN c_profesori LOOP
            DBMS_OUTPUT.PUT_LINE('*Profesor ' || v_profesor.nume_profesor || ' ' || v_profesor.prenume_profesor || ' - Clasa: ' || v_profesor.nume_clasa);
            
            DECLARE
                v_resurse_gasite BOOLEAN := FALSE;
            BEGIN
                FOR v_resursa IN c_resurse(v_profesor.id_clasa) LOOP
                    v_resurse_gasite := TRUE;
                    
                    IF v_resursa.tip_utilizator = 'Elev' THEN
                        v_tip_utilizator := 'elevul';
                    ELSIF v_resursa.tip_utilizator = 'Student' THEN
                        v_tip_utilizator := 'studentul';
                    ELSE
                        v_tip_utilizator := 'utilizatorul';
                    END IF;
                    
                    OPEN c_accesari_totale_resurse(v_resursa.id_resursa);
                    FETCH c_accesari_totale_resurse INTO v_nr_accesari_totale;
                    CLOSE c_accesari_totale_resurse;
                    
                    DBMS_OUTPUT.PUT_LINE('---Resursa ' || v_resursa.titlu || ' accesata de ' || v_tip_utilizator || ' ' || v_resursa.nume || ' ' || v_resursa.prenume);
                    DBMS_OUTPUT.PUT_LINE('------Accesari totale resursa: ' || v_nr_accesari_totale);
                END LOOP;
                
                IF NOT v_resurse_gasite THEN
                    DBMS_OUTPUT.PUT_LINE('~In aceasta clasa nimeni nu a accesat resurse!');
                END IF;
            END;
        END LOOP;
    END cerinta_7;

-- ~~~ 8 ~~~
    FUNCTION cerinta_8(id_clasa_param IN INT) RETURN SYS_REFCURSOR
    IS
        cursorRezultat SYS_REFCURSOR;
        ClasaInexistenta EXCEPTION;
        ClasaFaraTeste EXCEPTION;
        clasaCount INT;
        testeCount INT;
    BEGIN
        SELECT COUNT(*) INTO clasaCount FROM clase WHERE id_clasa = id_clasa_param;
        IF clasaCount = 0 THEN
            RAISE ClasaInexistenta;
        END IF;

        SELECT COUNT(*) INTO testeCount FROM teste WHERE id_clasa = id_clasa_param;
        IF testeCount = 0 THEN
            RAISE ClasaFaraTeste;
        END IF;

        OPEN cursorRezultat FOR
            SELECT c.nume_clasa AS "Clasa", t.titlu AS "TitluTest", COALESCE(TRUNC(AVG(ult.nota), 2), 0) AS "MediaNotelor"
            FROM clase c
            INNER JOIN teste t ON c.id_clasa = t.id_clasa
            LEFT JOIN utilizatori_lucreaza_teste ult ON t.id_test = ult.id_test
            WHERE c.id_clasa = id_clasa_param
            GROUP BY c.nume_clasa, t.titlu;

        RETURN cursorRezultat;
    EXCEPTION
        WHEN ClasaInexistenta THEN
            DBMS_OUTPUT.PUT_LINE('Clasa cu ID-ul ' || id_clasa_param || ' nu există.');
            RETURN NULL;
        WHEN ClasaFaraTeste THEN
            DBMS_OUTPUT.PUT_LINE('Clasa cu ID-ul ' || id_clasa_param || ' nu conține teste.');
            RETURN NULL;
    END;

-- ~~~ 9 ~~~
    PROCEDURE cerinta_9(p_id_utilizator INT) IS
        v_tip_utilizator utilizatori.tip_utilizator%TYPE;
        v_nume_grup grupuri.nume_grup%TYPE;
        v_id_grup INT;
        v_exista_membri_inactivi BOOLEAN := FALSE;
    BEGIN
        SELECT tip_utilizator INTO v_tip_utilizator FROM utilizatori WHERE id_utilizator = p_id_utilizator;
        IF v_tip_utilizator = 'Profesor' THEN
            RAISE_APPLICATION_ERROR(-20001, 'Sunteți profesor, nu puteți accesa grupuri.');
        END IF;
        
        BEGIN
            SELECT id_grup INTO v_id_grup FROM grupuri WHERE id_creator = p_id_utilizator;
        EXCEPTION
            WHEN TOO_MANY_ROWS THEN
                SELECT MIN(id_grup) INTO v_id_grup FROM grupuri WHERE id_creator = p_id_utilizator;
                DBMS_OUTPUT.PUT_LINE('Prea multe grupuri găsite. Se folosește grupul cu ID-ul cel mai mic.');
        END;
        
        SELECT nume_grup INTO v_nume_grup FROM grupuri WHERE id_grup = v_id_grup;
        
        FOR r_inactivi IN (
            SELECT u.nume, u.prenume, u.id_utilizator
            FROM utilizatori u
            JOIN utilizatori_creeaza_grupuri ucg ON u.id_utilizator = ucg.id_utilizator AND ucg.id_grup = v_id_grup
            LEFT JOIN utilizatori_acceseaza_resurse uar ON u.id_utilizator = uar.id_utilizator
            LEFT JOIN utilizatori_apartin_in_clase uaic ON u.id_utilizator = uaic.id_utilizator
            LEFT JOIN utilizatori_rezolva_probleme urp ON u.id_utilizator = urp.id_utilizator
            WHERE uar.id_resursa IS NULL AND uaic.id_clasa IS NULL AND urp.id_problema IS NULL
            GROUP BY u.nume, u.prenume, u.id_utilizator
        ) LOOP
            IF NOT v_exista_membri_inactivi THEN
                DBMS_OUTPUT.PUT_LINE('In grupul ' || v_nume_grup || ' membrii inactivi sunt:');
                v_exista_membri_inactivi := TRUE;
            END IF;
            DBMS_OUTPUT.PUT_LINE('--- ' || r_inactivi.nume || ' ' || r_inactivi.prenume || ', ID: ' || r_inactivi.id_utilizator);
        END LOOP;
        
        IF NOT v_exista_membri_inactivi THEN
            DBMS_OUTPUT.PUT_LINE('In grupul ' || v_nume_grup || ' toți sunt activi!');
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Utilizatorul nu este în baza de date sau nu are grupuri.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Eroare neașteptată: ' || SQLERRM);
    END;
END pachet_learnitude;
/

DECLARE
    curs SYS_REFCURSOR;
    clasa VARCHAR2(100);
    titluTest VARCHAR2(100);
    mediaNotelor NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('---Cerinta 6:');
    pachet_learnitude.cerinta_6;

    DBMS_OUTPUT.PUT_LINE('==============');
    DBMS_OUTPUT.PUT_LINE('---Cerinta 7:');
    pachet_learnitude.cerinta_7;

    BEGIN
        DBMS_OUTPUT.PUT_LINE('==============');
        DBMS_OUTPUT.PUT_LINE('---Cerinta 8:');
        curs := pachet_learnitude.cerinta_8(1);
        LOOP
            FETCH curs INTO clasa, titluTest, mediaNotelor;
            EXIT WHEN curs%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Clasa ' || clasa || ' --- Medie test ' || titluTest || ': ' || mediaNotelor);
        END LOOP;

        CLOSE curs;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('A apărut o eroare: ' || SQLERRM);
                IF curs IS NOT NULL THEN
                    CLOSE curs;
                END IF;
    END;

    DBMS_OUTPUT.PUT_LINE('==============');
    DBMS_OUTPUT.PUT_LINE('---Cerinta 9:');
    pachet_learnitude.cerinta_9(1);
END;
/


~~~ Cerinta 14
CREATE OR REPLACE TYPE tip_rezultat_acces_resursa_rec AS OBJECT (
    id_utilizator INT,
    id_resursa INT,
    titlu VARCHAR2(100),
    tip_resursa VARCHAR2(10)
);
/

CREATE OR REPLACE TYPE tip_rezultat_acces_resursa_tab IS TABLE OF tip_rezultat_acces_resursa_rec;
/


CREATE OR REPLACE PACKAGE cerinta_14 IS

    TYPE tip_utilizator_complet IS RECORD (
        id_utilizator INT,
        nume VARCHAR2(50),
        prenume VARCHAR2(50),
        email VARCHAR2(100),
        tip_utilizator VARCHAR2(10),
        detalii VARCHAR2(100));
    
    TYPE tip_rezultat_acces_resursa IS RECORD (
        id_utilizator INT,
        id_resursa INT,
        titlu VARCHAR2(100),
        tip_resursa VARCHAR2(10)
    );
    
    FUNCTION ObtineInfoUtilizator(id_utilizator_input INT) RETURN tip_utilizator_complet;
    FUNCTION ListaResurseAccesate(id_utilizator_input INT) RETURN tip_rezultat_acces_resursa_tab PIPELINED;  
     
    PROCEDURE AdaugaUtilizator(p_nume VARCHAR2, p_prenume VARCHAR2, p_email VARCHAR2, p_parola VARCHAR2, p_tip_utilizator VARCHAR2, p_detalii VARCHAR2);
    PROCEDURE AdaugaUtilizatorInClasa(id_utilizator_input INT, id_clasa_input INT);
    
END cerinta_14;
/

CREATE OR REPLACE PACKAGE BODY cerinta_14 IS

    FUNCTION ObtineInfoUtilizator(id_utilizator_input INT) RETURN tip_utilizator_complet IS
        rezultat tip_utilizator_complet;
    BEGIN
        SELECT u.id_utilizator, u.nume, u.prenume, u.email, u.tip_utilizator,
        CASE
                WHEN u.tip_utilizator = 'Elev' THEN
                    (SELECT profil || ', ' || clasa FROM elevi WHERE id_utilizator = u.id_utilizator)
                WHEN u.tip_utilizator = 'Student' THEN
                    (SELECT specializare || ', ' || an_studiu FROM studenti WHERE id_utilizator = u.id_utilizator)
                WHEN u.tip_utilizator = 'Profesor' THEN
                    (SELECT specializare FROM profesori WHERE id_utilizator = u.id_utilizator)
            END AS detalii
        INTO rezultat
        FROM utilizatori u
        WHERE u.id_utilizator = id_utilizator_input;
        
        RETURN rezultat;
    END ObtineInfoUtilizator;

    FUNCTION ListaResurseAccesate(id_utilizator_input INT) RETURN tip_rezultat_acces_resursa_tab PIPELINED IS
    BEGIN
        FOR rec IN (SELECT ur.id_utilizator, ur.id_resursa, r.titlu, r.tip_resursa
                    FROM utilizatori_acceseaza_resurse ur
                    JOIN resurse r ON ur.id_resursa = r.id_resursa
                    WHERE ur.id_utilizator = id_utilizator_input)
        LOOP
            PIPE ROW(tip_rezultat_acces_resursa_rec(rec.id_utilizator, rec.id_resursa, rec.titlu, rec.tip_resursa));
        END LOOP;
        
        RETURN;
    END ListaResurseAccesate;


    PROCEDURE AdaugaUtilizator(
            p_nume VARCHAR2, 
            p_prenume VARCHAR2, 
            p_email VARCHAR2, 
            p_parola VARCHAR2, 
            p_tip_utilizator VARCHAR2, 
            p_detalii VARCHAR2) 
    IS
        v_exist INT;
    BEGIN
        SELECT COUNT(*)
        INTO v_exist
        FROM utilizatori
        WHERE email = p_email;

        IF v_exist = 0 THEN
            INSERT INTO utilizatori (id_utilizator, nume, prenume, email, parola, tip_utilizator)
            VALUES (seq_utilizatori.NEXTVAL, p_nume, p_prenume, p_email, p_parola, p_tip_utilizator);

            IF p_tip_utilizator = 'Elev' THEN
                INSERT INTO elevi (id_elev, id_utilizator, profil, clasa)
                VALUES (seq_elevi.NEXTVAL, seq_utilizatori.CURRVAL, SUBSTR(p_detalii, 1, INSTR(p_detalii, ',')-1), SUBSTR(p_detalii, INSTR(p_detalii, ',')+2));
            ELSIF p_tip_utilizator = 'Student' THEN
                INSERT INTO studenti (id_student, id_utilizator, specializare, an_studiu)
                VALUES (seq_studenti.NEXTVAL, seq_utilizatori.CURRVAL, SUBSTR(p_detalii, 1, INSTR(p_detalii, ',')-1), SUBSTR(p_detalii, INSTR(p_detalii, ',')+2));
            ELSIF p_tip_utilizator = 'Profesor' THEN
                INSERT INTO profesori (id_profesor, id_utilizator, specializare)
                VALUES (seq_profesori.NEXTVAL, seq_utilizatori.CURRVAL, p_detalii);
            END IF;
        ELSE
            RAISE_APPLICATION_ERROR(-20000, 'Utilizatorul există deja în baza de date cu adresa de email ' || p_email);
        END IF;
    END AdaugaUtilizator;



    PROCEDURE AdaugaUtilizatorInClasa(id_utilizator_input INT, id_clasa_input INT) IS
        v_count_user INT;
        v_count_clasa INT;
        v_count_in_clasa INT;
    BEGIN
        SELECT COUNT(*)
        INTO v_count_user
        FROM utilizatori
        WHERE id_utilizator = id_utilizator_input;

        SELECT COUNT(*)
        INTO v_count_clasa
        FROM clase
        WHERE id_clasa = id_clasa_input;

        SELECT COUNT(*)
        INTO v_count_in_clasa
        FROM utilizatori_apartin_in_clase
        WHERE id_utilizator = id_utilizator_input AND id_clasa = id_clasa_input;

        IF v_count_user > 0 AND v_count_clasa > 0 AND v_count_in_clasa = 0 THEN
            INSERT INTO utilizatori_apartin_in_clase (id_clasa, id_utilizator)
            VALUES (id_clasa_input, id_utilizator_input);
        ELSIF v_count_user = 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'ID-ul utilizatorului nu există.');
        ELSIF v_count_clasa = 0 THEN
            RAISE_APPLICATION_ERROR(-20002, 'ID-ul clasei nu există.');
        ELSIF v_count_in_clasa > 0 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Utilizatorul este deja inscris in clasa.');
        END IF;
    END AdaugaUtilizatorInClasa;

END cerinta_14;
/

BEGIN
    cerinta_14.AdaugaUtilizator('Ion', 'Ionescu', 'ion.ionescu@learnitude.com', 'parola123', 'Elev', 'Real, 10');
END;
/

select * from utilizatori;

BEGIN
    cerinta_14.AdaugaUtilizatorInClasa(99, 1);
END;
/

select * from utilizatori_apartin_in_clase;

DECLARE
    v_info_utilizator cerinta_14.tip_utilizator_complet;
BEGIN
    v_info_utilizator := cerinta_14.ObtineInfoUtilizator(1);

    DBMS_OUTPUT.PUT_LINE('Nume: ' || v_info_utilizator.nume || ', Email: ' || v_info_utilizator.email || ', ' || v_info_utilizator.detalii);
END;
/

DECLARE
    v_count INT := 0;
BEGIN
    FOR rec IN (SELECT * FROM TABLE(cerinta_14.ListaResurseAccesate(id_utilizator_input => 31))) LOOP
        DBMS_OUTPUT.PUT_LINE('ID Utilizator: ' || rec.id_utilizator || 
                             ', ID Resursa: ' || rec.id_resursa || 
                             ', Titlu: ' || rec.titlu || 
                             ', Tip Resursa: ' || rec.tip_resursa);
        v_count := v_count + 1;
    END LOOP;
    
    IF v_count = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Utilizatorul nu a accesat resurse.');
    END IF;
END;
/